Channel
    它代表一个到实体(硬件设备、一个文件、一个网络套接字...)的开放连接，可以把它看作是入站、出站数据的载体，所以可以被关闭和打开。

Future
    可以看作是一个异步操作的结果占位符；在未来的某个时刻完成，并提供对其结果的访问。但是它提供的实现，只允许手动检查对应的操作是否已经完成，或者一直阻塞到它完成。
    非常繁琐，所以Netty提供了自己的实现-ChannelFuture,它提供了额外的几种方法，这些方法是我们能够注册一个或者多个ChannelFutureListener实例，监听器的回调方法operationComplete()
    将会在对应的操作完成时被调用(如果在添加时ChannelFuture已经完成，则直接调用)，简而言之，ChannelFutureListener提供的通知机制消除了手动检查对应擦欧总是否完成的必要。

ChannelHandler和事件
    Netty使用不同的事件通知我们状态的改变或者是操作的状态，这使得我们基于事件来触发适当的动作。每个事件都可以被分发给ChannelHandler类中的某个用户实现的方法，目前
    可以认为每个ChannelHandler的实例都类似于一种为了响应特定事件而被执行的回调。

选择器、事件和EventLoop
    Netty通过触发事件将Selector从应用程序中抽象出来，消除了所有本来将需要手动编写的派发代码。在内部，将会为每个Channel分配一个EventLoop用于处理所有事件。
    EventLoop本身只由一个线程驱动，其处理了一个Channel的所有I/O事件，并在该EventLoop的整个生命周期内都不会改变。